using System;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Builder;
using Swashbuckle.AspNetCore.Swagger;
using System.IO;
using System.Reflection;

namespace Config
{
    public class Swagger : IConfig
    {
        private IConfiguration _configuration;

        public Swagger(IConfiguration configuration)
        {
            this._configuration = configuration;
        }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
                    {
                        c.SwaggerDoc(
                                this._configuration["Swagger:Generator:Version"],
                                new Info
                                {
                                    Title = this._configuration["Swagger:Generator:Title"],
                                    Version = this._configuration["Swagger:Generator:Version"]
                                }
                                );
                        //Locate the XML file being generated by ASP.NET...
                        var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                        var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                        //... and tell Swagger to use those XML comments.
                        c.IncludeXmlComments(xmlPath);
                    });
        }

        public void Configure(IApplicationBuilder app)
        {
            app.UseSwagger();
            string endpointUrl = $"/swagger/{this._configuration["Swagger:Generator:Version"]}/swagger.json";
            app.UseSwaggerUI(c =>
                    {
                        c.SwaggerEndpoint(
                                endpointUrl,
                                this._configuration["Swagger:Generator:Title"]
                                );
                        if (Boolean.Parse(this._configuration["Swagger:UI:EnableRoot"]))
                        {
                            c.RoutePrefix = string.Empty;
                        }
                    });
        }
    }
}
